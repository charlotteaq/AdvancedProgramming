<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="CharlottesMBP2" name="adpro.monads.TermSpec" tests="30" errors="0" failures="1" time="0.74">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib"/><property name="java.vm.version" value="25.71-b15"/><property name="gopherProxySet" value="false"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="DK"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/Users/charlotteqvist/AdvancedProgramming/120-miniproject-2"/><property name="java.runtime.version" value="1.8.0_71-b15"/><property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment"/><property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/endorsed"/><property name="os.arch" value="x86_64"/><property name="java.io.tmpdir" value="/var/folders/xw/cz0sgzc54_s5mf6hgqp4vdqc0000gn/T/"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Mac OS X"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="java.library.path" value="/Users/charlotteqvist/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.11.4"/><property name="user.home" value="/Users/charlotteqvist"/><property name="user.timezone" value="Europe/Copenhagen"/><property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/Users/charlotteqvist/Applications/sbt/bin/sbt-launch.jar"/><property name="user.name" value="charlotteqvist"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/Users/charlotteqvist/Applications/sbt/bin/sbt-launch.jar test"/><property name="java.home" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="da"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_71"/><property name="java.ext.dirs" value="/Users/charlotteqvist/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/><property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_71.jdk/Contents/Home/jre/classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeBig"/><property name="sun.cpu.endian" value="little"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="adpro.monads.TermSpec" name="Basic eval should answer 42 to a division [Wadler]" time="0.037">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should return 42 from a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic eval should crash on unsafe terms" time="0.049">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should answer Return(42) to our division [Wadler]" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should answer Return(42) to a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception eval should return an exception value for a division by zero" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should should count two divisions" time="0.013">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should should count no divisions" time="0.003">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State eval should throw a scala exception on division by 0" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should give good 'result' and string output" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should return simple result for a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output eval (answer) should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should be 42 [Wadler]" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should return 42 for a constant" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should throw an exception" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic monadic eval should crash on unsafe terms" time="0.016">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Basic evalutors should behave identically" time="0.008">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic exception eval should be Return(42) [Wadler]" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic exception eval should return an exception on division by zero" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception evalutors should behave identically (safe)" time="0.011">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Exception evalutors should behave identically (unsafe)" time="0.013">
                                                 <failure message="GeneratorDrivenPropertyCheckFailedException was thrown during property evaluation.
 (TermSpec.scala:178)
  Falsified after 0 successful property evaluations.
  Location: (TermSpec.scala:178)
  Occurred when passed generated values (
    arg0 = Div(Con(174),Con(0))
  )" type="org.scalatest.exceptions.GeneratorDrivenPropertyCheckFailedException">org.scalatest.exceptions.GeneratorDrivenPropertyCheckFailedException: GeneratorDrivenPropertyCheckFailedException was thrown during property evaluation.
 (TermSpec.scala:178)
  Falsified after 0 successful property evaluations.
  Location: (TermSpec.scala:178)
  Occurred when passed generated values (
    arg0 = Div(Con(174),Con(0))
  )
	at org.scalatest.prop.Checkers$.doCheck(Checkers.scala:402)
	at org.scalatest.prop.Checkers$class.check(Checkers.scala:346)
	at adpro.monads.TermSpec.check(TermSpec.scala:20)
	at org.scalatest.prop.Checkers$class.check(Checkers.scala:357)
	at adpro.monads.TermSpec.check(TermSpec.scala:20)
	at adpro.monads.TermSpec$$anonfun$22.apply$mcV$sp(TermSpec.scala:178)
	at adpro.monads.TermSpec$$anonfun$22.apply(TermSpec.scala:178)
	at adpro.monads.TermSpec$$anonfun$22.apply(TermSpec.scala:178)
	at org.scalatest.Transformer$$anonfun$apply$1.apply$mcV$sp(Transformer.scala:22)
	at org.scalatest.OutcomeOf$class.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.FlatSpecLike$$anon$1.apply(FlatSpecLike.scala:1647)
	at org.scalatest.Suite$class.withFixture(Suite.scala:1122)
	at org.scalatest.FlatSpec.withFixture(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$class.invokeWithFixture$1(FlatSpecLike.scala:1644)
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1656)
	at org.scalatest.FlatSpecLike$$anonfun$runTest$1.apply(FlatSpecLike.scala:1656)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.FlatSpecLike$class.runTest(FlatSpecLike.scala:1656)
	at org.scalatest.FlatSpec.runTest(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1714)
	at org.scalatest.FlatSpecLike$$anonfun$runTests$1.apply(FlatSpecLike.scala:1714)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:413)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:427)
	at org.scalatest.SuperEngine$$anonfun$traverseSubNodes$1$1.apply(Engine.scala:401)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.org$scalatest$SuperEngine$$runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:483)
	at org.scalatest.FlatSpecLike$class.runTests(FlatSpecLike.scala:1714)
	at org.scalatest.FlatSpec.runTests(FlatSpec.scala:1683)
	at org.scalatest.Suite$class.run(Suite.scala:1424)
	at org.scalatest.FlatSpec.org$scalatest$FlatSpecLike$$super$run(FlatSpec.scala:1683)
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1760)
	at org.scalatest.FlatSpecLike$$anonfun$run$1.apply(FlatSpecLike.scala:1760)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:545)
	at org.scalatest.FlatSpecLike$class.run(FlatSpecLike.scala:1760)
	at org.scalatest.FlatSpec.run(FlatSpec.scala:1683)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:466)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:677)
	at sbt.TestRunner.runTest$1(TestFramework.scala:76)
	at sbt.TestRunner.run(TestFramework.scala:85)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1$$anonfun$apply$8.apply(TestFramework.scala:202)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1$$anonfun$apply$8.apply(TestFramework.scala:202)
	at sbt.TestFramework$.sbt$TestFramework$$withContextLoader(TestFramework.scala:185)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1.apply(TestFramework.scala:202)
	at sbt.TestFramework$$anon$2$$anonfun$$init$$1.apply(TestFramework.scala:202)
	at sbt.TestFunction.apply(TestFramework.scala:207)
	at sbt.Tests$$anonfun$9.apply(Tests.scala:216)
	at sbt.Tests$$anonfun$9.apply(Tests.scala:216)
	at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:44)
	at sbt.std.Transform$$anon$3$$anonfun$apply$2.apply(System.scala:44)
	at sbt.std.Transform$$anon$4.work(System.scala:63)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:226)
	at sbt.Execute$$anonfun$submit$1$$anonfun$apply$1.apply(Execute.scala:226)
	at sbt.ErrorHandling$.wideConvert(ErrorHandling.scala:17)
	at sbt.Execute.work(Execute.scala:235)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:226)
	at sbt.Execute$$anonfun$submit$1.apply(Execute.scala:226)
	at sbt.ConcurrentRestrictions$$anon$4$$anonfun$1.apply(ConcurrentRestrictions.scala:159)
	at sbt.CompletionService$$anon$2.call(CompletionService.scala:28)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
</failure>
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should should count two divisions" time="0.006">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should should count no divisions" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic state eval should throw a scala exception on division by 0" time="0.001">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="State evaluators should behave identically (safe)" time="0.013">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should give good result and string output" time="0.002">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should return simple result for a constant" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Monadic output eval should throw a scala exception on division by 0" time="0.0">
                                                 
                                               </testcase><testcase classname="adpro.monads.TermSpec" name="Output evaluators should behave identically (safe)" time="0.556">
                                                 
                                               </testcase>
                     <system-out></system-out>
                     <system-err></system-err>
                   </testsuite>